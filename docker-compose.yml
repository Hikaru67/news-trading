services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: news_trading
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_pass
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d news_trading"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka (single broker for MVP)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # BWEnews Client Service - Unified RSS and WebSocket client
  bwenews-client:
    build:
      context: ./services/bwenews-client
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379
      - DIRECT_FANOUT_ENABLED=${DIRECT_FANOUT_ENABLED:-true}
      - TELEGRAM_HTTP_URL=${TELEGRAM_HTTP_URL:-http://telegram-bot:8013/signal}
      - EXCHANGE_CHECKER_HTTP_URL=${EXCHANGE_CHECKER_HTTP_URL:-http://exchange-checker:8014/signal}
      - DISABLE_KAFKA_PUBLISH=${DISABLE_KAFKA_PUBLISH:-false}
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Execution Engine Service (Go)
  execution-engine:
    build:
      context: .
      dockerfile: services/execution-engine-go/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_pass@postgres:5432/news_trading
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379

  # Bybit API Client Service (Go)
  bybit-api-client:
    build:
      context: .
      dockerfile: services/bybit-api-client/Dockerfile
    environment:
      - BYBIT_API_KEY=${BYBIT_API_KEY}
      - BYBIT_SECRET_KEY=${BYBIT_SECRET_KEY}
      - BYBIT_TESTNET=${BYBIT_TESTNET:-true}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379
    depends_on:
      - kafka
      - redis
    profiles:
      - tools
    volumes:
      - ./logs:/root/logs

  # BWEnews Trading Services
  # (removed legacy bwenews-trader and bwenews-mexc-trader)

  

  # Phase 2: Advanced Trading Features
  advanced-trading-service:
    build:
      context: .
      dockerfile: services/advanced-trading-service/Dockerfile
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379
    depends_on:
      - kafka
      - redis
    restart: unless-stopped

  backtesting-service:
    build:
      context: .
      dockerfile: services/backtesting-service/Dockerfile
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379
    depends_on:
      - kafka
      - redis
    restart: unless-stopped

  # X (Twitter) Crawler Service - DISABLED (using mock data)
  # x-crawler:
  #   build:
  #     context: .
  #     dockerfile: services/x-crawler/Dockerfile
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   environment:
  #     - DATABASE_URL=postgresql://trading_user:trading_pass@postgres:5432/news_trading
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
  #     - REDIS_URL=redis://redis:6379
  #     - X_BEARER_TOKEN=${X_BEARER_TOKEN}
  #     - X_API_KEY=${X_API_KEY}
  #     - X_API_SECRET=${X_API_SECRET}
  #     - POSTGRES_HOST=postgres
  #     - POSTGRES_PORT=5432
  #     - POSTGRES_DB=news_trading
  #     - POSTGRES_USER=trading_user
  #     - POSTGRES_PASSWORD=trading_pass
  #   volumes:
  #     - ./logs:/app/logs

  # Exchange Checker Service - Check token listings on exchanges
  exchange-checker:
    build:
      context: ./services/exchange-checker
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379
      - INPUT_MODE=${INPUT_MODE:-http}
      - EXCHANGE_CHECKER_HTTP_PORT=${EXCHANGE_CHECKER_HTTP_PORT:-8014}
      - TRADE_EXECUTOR_HTTP_URL=${TRADE_EXECUTOR_HTTP_URL:-}
      - TELEGRAM_HTTP_URL=${TELEGRAM_HTTP_URL:-http://telegram-bot:8013/signal}
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    ports:
      - "8014:8014"

  # Trade Executor Service - Execute trades on detected exchanges
  trade-executor:
    build:
      context: ./services/trade-executor
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379
      - MEXC_API_KEY=${MEXC_API_KEY}
      - MEXC_SECRET_KEY=${MEXC_SECRET_KEY}
      - BYBIT_API_KEY=${BYBIT_API_KEY}
      - BYBIT_SECRET_KEY=${BYBIT_SECRET_KEY}
      - GATE_API_KEY=${GATE_API_KEY}
      - GATE_SECRET_KEY=${GATE_SECRET_KEY}
      - DEFAULT_TRADE_AMOUNT=${DEFAULT_TRADE_AMOUNT:-100}
      - MAX_TRADE_AMOUNT=${MAX_TRADE_AMOUNT:-1000}
      - MIN_TRADE_CONFIDENCE=${MIN_TRADE_CONFIDENCE:-0.6}
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Telegram Bot Service
  telegram-bot:
    build:
      context: .
      dockerfile: services/telegram-bot/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHANNEL_ID=${TELEGRAM_CHANNEL_ID}
      - INPUT_MODE=${INPUT_MODE:-http}
      - TELEGRAM_HTTP_PORT=${TELEGRAM_HTTP_PORT:-8013}
    volumes:
      - ./logs:/app/logs
    ports:
      - "8013:8013"

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  # Kafka UI Dashboard
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
      - zookeeper

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
